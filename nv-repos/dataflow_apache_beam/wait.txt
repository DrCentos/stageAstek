#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""A word-counting workflow."""

# pytype: skip-file

# beam-playground:
#   name: WordCount
#   description: An example that counts words in Shakespeare's works.
#   multifile: false
#   pipeline_options: --output output.txt
#   context_line: 44
#   categories:
#     - Combiners
#     - Options
#     - Quickstart
#   complexity: MEDIUM
#   tags:
#     - options
#     - count
#     - combine
#     - strings

import argparse
import logging
import re
import json
import pymssql

import apache_beam as beam
import pandas as pd
from apache_beam.io import ReadFromText
from apache_beam.io import WriteToText
from google.cloud import storage
from apache_beam.options.pipeline_options import PipelineOptions
from apache_beam.options.pipeline_options import SetupOptions
from apache_beam.coders.coders import Coder


class WriteToSQL(beam.DoFn):

    def __init__(self, json_path,table_name):
        self.json_path = json_path
        self.table_name = table_name

    def start_bundle(self):
        self.client = storage.Client()

    def process(self, element):
        print('jsonpath : ', self.json_path)
        connection = pymssql.connect(server='34.163.36.196',
                                     database='nicolas-vallot-bd',
                                     user='nicolas-vallot',
                                     password='nicolasvallot')
        cursor = connection.cursor()
        cursor.execute('INSERT INTO texts (text) VALUES ("abc")')
        #df = pd.read_json(json_path)
        #for line in datad:
        #    print('line : ', datad[line]['operateur'])
        #    cursor.execute(f"INSERT INTO {self.table_name} (text) VALUES (%s)", (datad[line]['operateur']))
        connection.commit()
        connection.close()


class CsvToJsonConvertion(beam.DoFn):

    def __init__(self, inputFilePath, outputFilePath):
        self.inputFilePath = inputFilePath
        self.outputFilePath = outputFilePath

    def start_bundle(self):
        self.client = storage.Client()

    def process(self, something):
        print('DANS LE PROCESS CSV TO JSON')
        df = pd.read_csv(self.inputFilePath, delimiter=';')
        df.to_json(self.outputFilePath, orient='index')

def run(argv=None, save_main_session=True):
    """Main entry point; defines and runs the wordcount pipeline."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--input',
        dest='input',
        help='Input file to process.')
    parser.add_argument(
        '--output',
        dest='output',
        required=True,
        help='Output file to write results to.')
    known_args, pipeline_args = parser.parse_known_args(argv)

    # We use the save_main_session option because one or more DoFn's in this
    # workflow rely on global context (e.g., a module imported at module level).
    pipeline_options = PipelineOptions(pipeline_args)
    pipeline_options.view_as(SetupOptions).save_main_session = save_main_session

    print('known_args.input : ',type(known_args.input))
    # The pipeline will be run on exiting the with block.
    json_ = {}

    with beam.Pipeline(options=pipeline_options) as pipeline:
        (pipeline
         | 'Start' >> beam.Create([None])
         | 'Convertion CSV to JSON' >> beam.ParDo(CsvToJsonConvertion(known_args.input, known_args.output,))
         | 'Write to SQL' >> beam.ParDo(WriteToSQL(known_args.output,'texts'))
         )
    print("APREPRPERPEPR")

if __name__ == '__main__':
    logging.getLogger().setLevel(logging.INFO)
    run()